<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mini Excel Web</title>
  <style>
    body {
      font-family: Arial;
      padding: 20px;
    }
    table {
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #ccc;
      width: 80px;
      height: 30px;
      text-align: center;
    }
    input {
      width: 100%;
      height: 100%;
      box-sizing: border-box;
      border: none;
      text-align: center;
    }
    button {
      margin-top: 15px;
      padding: 8px 12px;
      font-size: 14px;
    }
    #sum-output {
      margin-top: 10px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h2>Web báº£ng tÃ­nh mini (giá»‘ng Excel)</h2>
  <table id="spreadsheet"></table>

  <button onclick="exportToJSON()">ðŸ’¾ LÆ°u dá»¯ liá»‡u</button>
  <button onclick="importFromJSON()">ðŸ“‚ Táº£i dá»¯ liá»‡u</button>
  <button onclick="sumSelectedColumn()">ðŸ§® TÃ­nh tá»•ng cá»™t</button>
  <button onclick="resetSheet()">ðŸ”„ Reset báº£ng</button>
  <input type="file" id="fileInput" style="display:none" />

  <div id="sum-output"></div>

  <script>
    const rows = 10 + 1;
    const cols = 10;
    const sheet = document.getElementById('spreadsheet');
    const data = {};

    const colHeader = document.createElement('tr');
    colHeader.appendChild(document.createElement('th'));
    for (let c = 0; c < cols; c++) {
      const th = document.createElement('th');
      th.textContent = c === 0 ? 'B' : c === 1 ? 'S' : '';
      colHeader.appendChild(th);
    }
    sheet.appendChild(colHeader);

    for (let r = 1; r <= rows; r++) {
      const tr = document.createElement('tr');
      const rowHeader = document.createElement('th');
      rowHeader.textContent = r;
      tr.appendChild(rowHeader);

      for (let c = 0; c < cols; c++) {
        const td = document.createElement('td');
        const input = document.createElement('input');
        const cellId = `${String.fromCharCode(65 + c)}${r}`;

        input.dataset.cell = cellId;
        input.disabled = r === rows;
        input.addEventListener('input', () => {
          data[cellId] = input.value;
          updateSheet();
        });

        input.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            const nextRow = r + 1;
            if (nextRow < rows) {
              const nextInput = sheet.rows[nextRow].cells[c + 1].querySelector('input');
              if (nextInput) nextInput.focus();
            }
          }
        });

        td.appendChild(input);
        tr.appendChild(td);
      }
      sheet.appendChild(tr);
    }

    function updateSheet() {
      autoSumLastRow();
      for (let r = 1; r <= rows; r++) {
        for (let c = 0; c < cols; c++) {
          const cellId = `${String.fromCharCode(65 + c)}${r}`;
          const input = sheet.rows[r].cells[c + 1].querySelector('input');
          const rawValue = data[cellId];

          if (rawValue && rawValue.toString().startsWith('=')) {
            try {
              const formula = rawValue.slice(1).toUpperCase();
              const sumMatch = formula.match(/^SUM\(([A-J][1-9][0]?)(:)([A-J][1-9][0]?)\)$/);

              if (sumMatch) {
                const start = sumMatch[1];
                const end = sumMatch[3];
                const sum = calculateSumRange(start, end);
                input.value = sum;
              } else {
                const expr = formula.replace(/[A-J][1-9][0]?/g, ref => parseFloat(data[ref]) || 0);
                input.value = eval(expr);
              }
            } catch {
              input.value = 'ERR';
            }
          } else {
            input.value = rawValue || '';
          }
        }
      }
    }

    function calculateSumRange(start, end) {
      const colStart = start.charCodeAt(0);
      const colEnd = end.charCodeAt(0);
      const rowStart = parseInt(start.slice(1));
      const rowEnd = parseInt(end.slice(1));
      let sum = 0;

      for (let c = Math.min(colStart, colEnd); c <= Math.max(colStart, colEnd); c++) {
        for (let r = Math.min(rowStart, rowEnd); r <= Math.max(rowStart, rowEnd); r++) {
          const ref = `${String.fromCharCode(c)}${r}`;
          const val = parseFloat(data[ref]);
          if (!isNaN(val)) sum += val;
        }
      }
      return sum;
    }

    function exportToJSON() {
      const blob = new Blob([JSON.stringify(data)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'spreadsheet-data.json';
      a.click();
    }

    function importFromJSON() {
      document.getElementById('fileInput').click();
    }

    document.getElementById('fileInput').addEventListener('change', function() {
      const file = this.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const importedData = JSON.parse(e.target.result);
          Object.keys(importedData).forEach(key => data[key] = importedData[key]);
          updateSheet();
        } catch {
          alert('File khÃ´ng há»£p lá»‡!');
        }
      };
      reader.readAsText(file);
    });

    function sumSelectedColumn() {
      const column = prompt("Nháº­p kÃ½ hiá»‡u cá»™t (A - J) Ä‘á»ƒ tÃ­nh tá»•ng:");
      if (!column || column.length !== 1) return;
      const colLetter = column.toUpperCase();
      if (colLetter < 'A' || colLetter > 'J') return alert('Cá»™t khÃ´ng há»£p lá»‡!');

      let sum = 0;
      for (let r = 1; r < rows; r++) {
        const cellId = `${colLetter}${r}`;
        const val = parseFloat(data[cellId]);
        if (!isNaN(val)) sum += val;
      }
      document.getElementById("sum-output").textContent = `Tá»•ng cá»™t ${colLetter}: ${sum}`;
    }

    function autoSumLastRow() {
      for (let c = 0; c < cols; c++) {
        let sum = 0;
        for (let r = 1; r < rows; r++) {
          const ref = `${String.fromCharCode(65 + c)}${r}`;
          const val = parseFloat(data[ref]);
          if (!isNaN(val)) sum += val;
        }
        const totalCell = `${String.fromCharCode(65 + c)}${rows}`;
        data[totalCell] = sum.toString();
      }
    }

    function resetSheet() {
      Object.keys(data).forEach(key => delete data[key]);
      updateSheet();
    }

    updateSheet();
  </script>
</body>
</html>
